// Doesn't _fully_ work yet; transpile fine, waiting on semantic stage for checking
//import os
//import "/home/scottshotgg/something"

// Getting a weird error here about "in" not being defined as a keyword .....
// It's because `in` is a keyword so its resolving that beforehand in the lexer, fix this
// Don't feel like working on lexer shit rn bleh; need to check the spacing which I thought I was already doing .........................
//include iostream

/*
#![lang=c]
{
  std::string = "hey itsa me, c-mario";
}
*/

// Doesn't work yet; waiting on semantic stage
//include "user_defined.h"

// This will take someone elses code an plop it into your program;
// useful for _extending_ something that is not originally your implementation
//use os as os2

type myInt = int

struct AnotherOne = {
  bool abc = true
}

struct myStruct = {
  int i = 10
  string something = "something"
  AnotherOne ayy


/* This does not work right now for some reason:
    : Building AST ... panic: interface conversion: interface {} is []*builder.Node, not string

  function something2() {
    string h = "hi"
  }
*/
}

func something() {
  myStruct s = {
    i = 100 * 7 / 3
    something = "else"
    ayy = {
      abc = true
    }
  }

  int i = 10

  // Functions do not have to be pre-defined
  another(i, "s")
}

/*
  The main function does not require a return type;
  It can only accept `int` as the return type and
  will automatically be injected if not supplied
*/
func main() {
  // Cannot set member variables yet
  object o = {
    int a = 6

    // init() is a special function that serves as the constructor when the object is _imported_
    func init() {}

    // This shouldn't go in global scope and the function name should override whatever
    // is outside of the scope
    func something1() {
      int b = 6
    }

    struct whatever = {
      int a = 6
    }
  }

  enum {
    some
    one = some + 2
    here
  }

  if 69 > one + 20 {
    int x = 7
  } else if some {
    var y = "1000000" + true
  } else {
    launch something()
  }


  launch something()

  defer something()

  string thing = "thing"
  string nothing = "nothing"

  map m = {
    thing : 6
    "not_a_thing" : nothing
    6 : true
    false : "thing"
  }

  // Compiler cannot squash types right now so maps have unravel into vars
  var m_thing = m[thing]

  int a = 0
  int* b = &a
  int c = *b

  int i = 800008

  for j in [1,2,3] {
    i = j
  }
  int k = 10

  for j in [1,2,3] {
    for j in [4,5,6] {
      i = j
    }
  }

  // Functions do not have to be pre-defined
  something()
}

func another(int i, string s) {
  int j = 6666666
}