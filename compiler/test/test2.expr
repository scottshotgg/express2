struct Token = {
  string name = ""
  var value
}

func delayedPrintln() {
  msleep(now() + 1000)
  Println("hi")
}

func main() {
  defer Println("\\n--- ENDING ---")
  Println("\\n--- STARTING ---\\n")
  launch delayedPrintln()

  Token ident = {
    name = "ident"
  }

  map tokens = {
    "ident": ident
  }

  // Show some var usage

  // var array
  var[] vv = [666, "something_here", false, 73.986622195]

  // var assignment and automatic type changing
  for x in vv {
    tokens["ident"].value = vv[x]
    Println("vv[x]:", vv[x])
    Println("tokens[\\\"ident\\\"].value:", tokens["ident"].value, "\\n")
  }

  // Fill a map
  int[] i = [1, 2, 3, 4, 5, 6, 7, 8, 9]

  // The compiler cannot minimize your type and thus uses the 
  // default ground state of <var, var>
  map m = {}

  for x in i {
    m[x] = i[x]
  }

  Println("---")

  for x in m {
    m["result"] = m["result"] + m[x] * m[x]
    Println("square: ", m[x] * m[x], "\\nresult: ", m["result"], "\\n")
  }
}