import "/home/scottshotgg/Development/go/src/github.com/scottshotgg/express2/compiler/test/time.expr"
import "/home/scottshotgg/Development/go/src/github.com/scottshotgg/express2/compiler/test/stdlib/stack.expr"

struct Token = {
  string name = ""
  var value
}

struct Stack = {
    var[] value
}

Stack s

func Push(var v) {
  s.value.push_back(v)
}

func Pop() var {
  var v = s.value[s.value.size()-1]
  s.value.pop_back()
  return v
}

func to_string(var v) string {
  return v.to_string()
}

string num = "current_num"
string res = "result"

func main() {
  Println("size before:", s.value.size())

  Push(7)
  Push("hello")
  Push(false)
  Push(777.333)
  Push("7lskdjfsdlkjfldkj")
  Println("size after:", s.value.size())
  Println(Pop())

  for int yi = 1; yi < 10; yi++ {

  }

  sleep(1)

  int t = time.Now()
  Println("Current time is:", t)
  sleep(1)

  defer Println("\\n--- ENDING ---")
  Println("\\n--- STARTING ---\\n")

  Token ident = {
    name = "ident"
  }

  map tokens = {
    "ident": ident
  }

  // Show some var usage

  // var array
  var[] vv = [666, "something_here", false, 73.986622195]

  // var assignment and automatic type changing
  for x in vv {
    tokens["ident"].value = vv[x]
    Println("vv[x]:", vv[x])
    Println("tokens[\\\"ident\\\"].value:", tokens["ident"].value, "\\n")
  }

  Println("---\\n")

  // Fill a map
  int[] i = [1, 2, 3, 4, 5, 6, 7, 8, 9]

  // The compiler cannot minimize your type and thus uses the 
  // default ground state of <var, var>
  map m

  for x in i {
    m[x] = x * x
    m[res] = m[res] + m[x]
    //m[x] = m[x].to_string()
    m[x] = to_string(x*x)

    printResults(m, x)
  }
  
  m[res] = m[res].to_string()
  m["done"] = true

  Println("m:", m)

  sleep(1)

  Println("Program took:", time.Now() - t, "seconds")
}

func printResults(map m, int x) {
  Println(
    "square:", x * x, 
    "\\nresult:", 
    m[res], 
    "\\n"
  )
}