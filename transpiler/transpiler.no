package transpiler

import (
	"encoding/json"
	"fmt"

	"strings"

	"strconv"

	"github.com/pkg/errors"
	"github.com/scottshotgg/express2/builder"
)

// Transpiler should only deal in terms of statements
// everything else that you need should be behind the scenes
type Transpiler interface {
	// This has a bunch of function
	Transpile() (*string, error)
	Statement(n *builder.Node) (*string, error)
	Expression(n *builder.Node) (*string, error)

	// Block(n *builder.Node) (*string, error) // This might have to have both a Statement and Expression
	// Function(n *builder.Node) (*string, error)
	// Return(n *builder.Node) (*string, error)
	// Call(n *builder.Node) (*string, error)
	// IfElse(n *builder.Node) (*string, error)
	// TypeDef(n *builder.Node) (*string, error)
	// Struct(n *builder.Node) (*string, error)
	// Import(n *builder.Node) (*string, error)
	// Include(n *builder.Node) (*string, error)
	// Package(n *builder.Node) (*string, error)

	// Increment(n *builder.Node) (*string, error)
	// Decrement(n *builder.Node) (*string, error)
	// Index(n *builder.Node) (*string, error)
	// Select(n *builder.Node) (*string, error)
	// Ref(n *builder.Node) (*string, error)
	// Deref(n *builder.Node) (*string, error)

	// Map(n *builder.Node) (*string, error)
	// Object(n *builder.Node) (*string, error)
	// Enum(n *builder.Node) (*string, error)
	// Conditional(n *builder.Node) (*string, error)
	// BinOp(n *builder.Node) (*string, error)

	// Defer(n *builder.Node) (*string, error)

	// Ident(n *builder.Node) (*string, error)
	// Literal(n *builder.Node) (*string, error)

	// Declaration(n *builder.Node) (*string, error)
	// KeyValue(n *builder.Node) (*string, error)
	// Launch(n *builder.Node) (*string, error)
	// Assignment(n *builder.Node) (*string, error)
	// Array(n *builder.Node) (*string, error) // This might have to have both a Statement and Expression
	// EGroup(n *builder.Node) (*string, error)
	// SGroup(n *builder.Node) (*string, error)
	// ForStd(n *builder.Node) (*string, error)
	// ForIn(n *builder.Node) (*string, error)
	// ForOf(n *builder.Node) (*string, error)
	// While(n *builder.Node) (*string, error)

	// Utility functions need to be added; things like GenerateLengthCall from node
}

// Make a C implementation; JUST C, not C++
// Make an LLVM IR implementation

type C99 struct {
	ast     *builder.Node
	imports map[string]string
}

func NewC99(ast *builder.Node) *C99 {
	return &C99{
		ast:     ast,
		imports: map[string]string{},
	}
}

func (t *C99) Transpile() (*string, error) {
	// try make later
	var stmts []string

	for _, n := range t.ast.Value.([]*builder.Node) {
		var stmt, err = t.Statement(n)
		if err != nil {
			return nil, err
		}

		stmts = append(stmts, *stmt)
	}

	var code = strings.Join(stmts, "\n")
	return &code, nil
}

func (t *C99) addSemi(code *string, err error) (*string, error) {
	if err != nil {
		return nil, err
	}

	*code += ";"

	return code, nil
}

func (t *C99) Statement(n *builder.Node) (*string, error) {
	switch n.Type {
	case "function":
		return t.function(n)

	case "decl":
		return t.addSemi(t.declaration(n))

	case "struct":
		return t.structure(n)

	case "assignment":
		return t.addSemi(t.assignment(n))

	case "package":
		return t.packageStatement(n)

	case "import":
		return t.importStatement(n)

	case "return":
		return t.addSemi(t.returnStatement(n))

	case "selection":
		return t.addSemi(t.selection(n))

	case "call":
		return t.addSemi(t.call(n))
	}

	return nil, errors.Errorf("could not transpile statement: %+v", *n)
}

func (t *C99) structure(n *builder.Node) (*string, error) {
	/*
		This should transpile to:
		struct something = {} : struct something {}
		Type is struct
		Left is the ident
		Right is the value
	*/

	if n.Type != "struct" {
		return nil, errors.New("Node is not a struct")
	}

	// Transpile the ident which will become a usable type
	var vString, err = t.Expression(n.Left)
	if err != nil {
		return nil, err
	}

	// Could just have it add `struct` here but this will show us changes
	var nString = n.Type + " " + *vString

	// Transpile the block for the value
	vString, err = t.sblock(n.Right)
	if err != nil {
		return nil, err
	}

	nString += *vString + ";"

	return &nString, nil
}

func (t *C99) Expression(n *builder.Node) (*string, error) {
	/*
		An expression could be many things:
		- literal
		- ident
		- function call
		- operation
	*/

	var code string
	switch n.Type {
	case "ident":
		code = n.Value.(string)

	case "literal":
		switch n.Kind {
		case "int":
			code = strconv.Itoa(n.Value.(int))

		case "bool":
			code = strconv.FormatBool(n.Value.(bool))

		case "float":
			code = strconv.FormatFloat(n.Value.(float64), 'f', -1, 64)

		case "char":
			fallthrough
		case "string":
			code = "\"" + n.Value.(string) + "\""

		}

	case "binop", "comp":
		// [expr] [op] [expr]
		// [expression] = [expression]
		var expr, err = t.Expression(n.Left)
		if err != nil {
			return nil, err
		}

		code += *expr + " " + n.Value.(string) + " "

		// [expression] = [expression]
		expr, err = t.Expression(n.Right)
		if err != nil {
			return nil, err
		}

		code += *expr

	case "call":
		return t.call(n)

	case "selection":
		var sel, err = t.selection(n)
		if err != nil {
			return nil, err
		}

		code += *sel
		return &code, nil

	case "block":
		var vString, err = t.sblock(n.Right)
		if err != nil {
			return nil, err
		}

		code += *vString

	case "index":
		var sel, err = t.index(n)
		if err != nil {
			return nil, err
		}

		code += *sel
		return &code, nil

	default:
		pn(n)
		return nil, errors.Errorf("could not deduce expression from: %+v", *n)
	}

	return &code, nil
}

func (t *C99) index(n *builder.Node) (*string, error) {
	/*
		Left is an expression
		Right is an expression
	*/

	if n.Type != "index" {
		return nil, errors.New("Node is not an index")
	}

	lhs, err := t.Expression(n.Left)
	if err != nil {
		return nil, err
	}

	rhs, err := t.Expression(n.Right)
	if err != nil {
		return nil, err
	}

	var nString = *lhs + "[" + *rhs + "]"

	return &nString, nil
}

func (t *C99) declaration(n *builder.Node) (*string, error) {
	// [type] [assignment]

	// The value is the type of the declaration
	var typeOf *string
	var assignment *string
	var err error

	typeOf, err = t.typeOfDecl(n)
	if err != nil {
		return nil, err
	}

	assignment, err = t.assignment(n)
	if err != nil {
		return nil, err
	}

	var code = *typeOf + " " + *assignment

	return &code, nil

}

func (t *C99) function(n *builder.Node) (*string, error) {
	// func [ident](args) (returns) (body)

	// Get the return type kind -> support multi args later

	// body
	body, err := t.sblock(n.Value.(*builder.Node))
	if err != nil {
		return nil, err
	}

	// args
	args, err := t.sgroup(n.Metadata["args"].(*builder.Node))
	if err != nil {
		return nil, err
	}

	var (
		returnsI, ok = n.Metadata["returns"]
		returns      = &defaultFuncType
	)

	if ok && returnsI != nil {
		returnsNode, ok := returnsI.(*builder.Node)
		if !ok {
			return nil, fmt.Errorf("returns was not a *builder.Node: %+v", returnsNode)
		}

		// returns; for now the first one will be taken as the return
		returns, err = t.egroup(returnsNode)
		if err != nil {
			return nil, err
		}
	}

	var code = fmt.Sprintf("%s %s(%s) %s", *returns, n.Kind, *args, *body)

	return &code, nil
}

var defaultFuncType = "int"

func (t *C99) call(n *builder.Node) (*string, error) {
	var code string

	// basic function call
	// [expr]({args})
	var expr, err = t.Expression(n.Value.(*builder.Node))
	if err != nil {
		return nil, err
	}

	code += *expr

	// args
	args, err := t.egroupCall(n.Metadata["args"].(*builder.Node))
	if err != nil {
		return nil, err
	}

	code += "(" + *args + ")"

	return &code, nil
}

func (t *C99) assignment(n *builder.Node) (*string, error) {
	// [expression] = [expression]
	var expr, err = t.Expression(n.Left)
	if err != nil {
		return nil, err
	}

	var code = *expr

	// This is for the case:
	//	int i
	if n.Right == nil {
		return &code, nil
	}

	expr, err = t.Expression(n.Right)
	if err != nil {
		return nil, err
	}

	code += " = " + *expr

	return &code, nil
}

func (t *C99) typeOfDecl(n *builder.Node) (*string, error) {
	var typeOf string

	var nn, ok = n.Value.(*builder.Node)
	if !ok {
		return nil, errors.New("not ok")
	}

	switch nn.Type {
	case "type":
		typeOf = nn.Value.(string)
		return &typeOf, nil
		// case "selection"
	}

	blob, _ := json.Marshal(nn)
	fmt.Println(string(blob))

	return nil, errors.Errorf("unknown type for type %+v", nn.Type)
}

// These will give back blank strings if they are nil
func (t *C99) sgroup(n *builder.Node) (*string, error) {
	var args []string

	for _, node := range n.Value.([]*builder.Node) {
		arg, err := t.declaration(node)
		if err != nil {
			return nil, err
		}

		args = append(args, *arg)
	}

	var code = strings.Join(args, ", ")

	return &code, nil
}

func (t *C99) egroupCall(n *builder.Node) (*string, error) {
	// This is used for a call that is passing arguments
	var args []string

	for _, node := range n.Value.([]*builder.Node) {
		arg, err := t.Expression(node)
		if err != nil {
			return nil, err
		}

		args = append(args, *arg)
	}

	var code = strings.Join(args, ", ")

	return &code, nil
}

func (t *C99) egroup(n *builder.Node) (*string, error) {
	// TODO: i think we should rewrite this
	// Only get the first return now since we are not worried about multiple returns rn
	var code = n.Value.([]*builder.Node)[0].Kind

	return &code, nil
}

func (t *C99) sblock(n *builder.Node) (*string, error) {
	var stmts = []string{"{"}

	if n != nil {
		for _, node := range n.Value.([]*builder.Node) {
			stmt, err := t.Statement(node)
			if err != nil {
				return nil, err
			}

			stmts = append(stmts, *stmt)
		}
	}

	var code = strings.Join(append(stmts, "}"), "\n")

	return &code, nil
}

func (t *C99) returnStatement(n *builder.Node) (*string, error) {
	// Not supporting multiple returns for now
	// return {expr}
	var code = "return"

	if n.Left != nil {
		var expr, err = t.Expression(n.Left)
		if err != nil {
			return nil, err
		}

		code += " " + *expr
	}

	return &code, nil
}

func (t *C99) selection(n *builder.Node) (*string, error) {
	var code string

	// This needs to be recursive
	var expr, err = t.Expression(n.Left)
	if err != nil {
		return nil, err
	}

	// Shave off the c package if we are translating to c
	if *expr != "c" {
		code += *expr + "."

	}

	if n.Right.Type == "selection" {
		expr, err = t.selection(n.Right)
		if err != nil {
			return nil, err
		}
	} else {
		expr, err = t.Expression(n.Right)
		if err != nil {
			return nil, err
		}
	}

	code += *expr

	return &code, nil
}

// Later on we should have packages be folders
func (t *C99) importStatement(n *builder.Node) (*string, error) {
	// since all code will be in one file for now, import statements should
	// pretty much just copy paste

	// var code = t.imports[n.Left.Value.(string)]
	var code string
	return &code, nil
}

func (t *C99) packageStatement(n *builder.Node) (*string, error) {
	// package [ident]
	// left is ident, right is the package sblock itself
	// packages should be namespaces

	var packageName = "namespace " + n.Left.Value.(string)

	var body, err = t.sblock(n.Right)
	if err != nil {
		return nil, err
	}

	t.imports[n.Left.Value.(string)] = packageName + " " + *body

	var code string
	return &code, nil
}

// func (t *C99) eblock(n *builder.Node) (*string, error) {
// 	for _, node := range {

// 	}

// 	return nil, nil
// }

func pn(n *builder.Node) {
	fmt.Printf("node %+v\n", *n)
}
