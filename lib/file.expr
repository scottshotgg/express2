// file provides basic file io and only depends on libc
package file

// We only need the libc functions to implement this
import c

// Enumerate the allowed modes; this may vary from one OS to another
enum Mode {
  r
  w
  a
  r+
  w+
  a+
}

// File represents a file object; this is akin to a file pointer in libc
struct File {
  c.FILE* fp
  Mode mode
  string name
  string path
  bool open
}

func File.IsOpen() bool {
  File.open = true
  return File.open
}

func File.Close() int {
  File.open = false
  return c.fclose(File.fp)
}

func File.CurrentPostition() int {
  return c.ftell(File.fp)
}

func File.SeekPosition(int pos) int {
  return c.fseek(File.fp, pos, c.SEEK_SET)
}

// Length retrieves the entire length of the file
func File.Length() int {
  defer File.SeekPosition(File.CurrentPostition())

  c.fseek(File.fp, 0, c.SEEK_END)

  return File.CurrentPostition()
}

// Rename will only allow changing the name of the file
func File.Rename(string name) int {
  string newName = File.path + "/" + name

  return File.Move(newName.c_str())
}

// Move functions as it does in bash
func File.Move(string name) int {
  string oldName = File.path + "/" + File.name

  return c.rename(oldName.c_str(), name.c_str())
}

// Delete will immediately remove the file
func File.Delete() int {
  string loc = File.path + "/" + file.name

  return c.remove(loc.c_str())
}

// Read will read the directed amount of characters
func File.Read(int num) {
  string line
  int count
  int ch = c.fgetc(File.fp)

  while !c.feof(File.fp) && count < num {
    count++
    line += ch
    ch = c.fgetc(File.fp)
  }

  return line
}

// ReadNextChar will grab only the next character
func File.ReadNextChar() char {
  if !c.feof(File.fp) {
    return c.fgetc(File.fp)
  }

  return '';
}

// ReadLine will read up until the next newline
func File.ReadLine() string {
  string line
  int ch = c.fgetc(File.fp)

  while !c.feof(File.fp) && ch != '\n' {
    line += ch
    ch = c.fgetc(File.fp)
  }

  return line
}

// Write appends text to the file
func File.Write(string text) int {
  return c.fputs(text.c_str(), File.fp)
}

func File.WriteLine(string text) int {
  return Write(text + "\n")
}

// Open is the package accessor for the File type
func Open(string loc, Mode mode) File {
  return File {
    fp = fopen(loc.c_str(), mode.c_str())
    mode = mode
    path = c.basename(loc.c_str()
    name = c.dirname(loc.c_str())
    open = true
  }
}

// ReadFile is a simplified method for obtaining a files contents
func ReadFile(string loc) string {
  File f = Open(loc, r)
  defer f.Close()

  string contents
  int amount = 100
  char[amount] buff

  while c.fgets(buff, amount, f) {
    contents += string(buff)
  }

  return contents
}

// WriteFile is a simplified method for writing file contents
func WriteFile(string loc, string contents, bool overwrite) {
  File f = Open(loc, w)
  defer f.Close()

  if f == nil || overwrite { 
    f.Write(contents) 
  }
}

func CopyFile(string from, string to, bool overwrite) {
  WriteFile(to, ReadFile(from), overwrite)
}